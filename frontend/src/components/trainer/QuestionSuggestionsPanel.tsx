import { useState } from 'react'
import { X, Sparkles, Loader2, ChevronRight, AlertCircle } from 'lucide-react'

interface QuestionSuggestion {
  question: string
  rationale: string
  source: 'AI_GENERATED' | 'TEMPLATE'
}

interface QuestionSuggestionsPanelProps {
  sessionId: string
  trainerEmail: string
  isOpen: boolean
  onClose: () => void
  onUseQuestion: (question: string, source: 'AI_GENERATED' | 'TEMPLATE') => void
}

export function QuestionSuggestionsPanel({
  sessionId,
  trainerEmail,
  isOpen,
  onClose,
  onUseQuestion
}: QuestionSuggestionsPanelProps) {
  const [suggestions, setSuggestions] = useState<QuestionSuggestion[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [rateLimit, setRateLimit] = useState<{ remaining: number; dailyLimit: number } | null>(null)

  const fetchSuggestions = async () => {
    setLoading(true)
    setError(null)

    try {
      const response = await fetch(
        `/api/trainers/sessions/${sessionId}/ai-suggestions?email=${encodeURIComponent(trainerEmail)}`
      )

      const data = await response.json()

      if (!response.ok) {
        if (response.status === 429) {
          setError(data.message || 'Daily AI suggestion limit reached')
          setRateLimit(data.data)
        } else {
          setError(data.message || 'Failed to generate suggestions')
        }
        return
      }

      setSuggestions(data.data.suggestions)
      setRateLimit(data.data.rateLimit)
    } catch (err: any) {
      setError('Network error. Please try again.')
      console.error('Error fetching AI suggestions:', err)
    } finally {
      setLoading(false)
    }
  }

  const handleUseQuestion = (suggestion: QuestionSuggestion) => {
    onUseQuestion(suggestion.question, suggestion.source)
    onClose()
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-gray-200 flex items-center justify-between sticky top-0 bg-white z-10">
          <div className="flex items-center">
            <Sparkles className="h-6 w-6 text-purple-600 mr-3" />
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                AI Question Suggestions
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                Context-aware questions generated by Claude AI
              </p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Rate Limit Info */}
          {rateLimit && (
            <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>{rateLimit.remaining}</strong> of <strong>{rateLimit.dailyLimit}</strong> AI suggestions remaining today
              </p>
            </div>
          )}

          {/* Initial State */}
          {suggestions.length === 0 && !loading && !error && (
            <div className="text-center py-8">
              <Sparkles className="h-16 w-16 text-purple-300 mx-auto mb-4" />
              <h4 className="text-lg font-medium text-gray-900 mb-2">
                Ready to Generate Smart Questions?
              </h4>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                Our AI will analyze your session topic, participant levels, and the sequence of your roundtable
                to suggest thoughtful, relevant questions.
              </p>
              <button
                onClick={fetchSuggestions}
                className="bg-purple-600 text-white px-6 py-3 rounded-md hover:bg-purple-700 font-medium inline-flex items-center"
              >
                <Sparkles className="h-5 w-5 mr-2" />
                Generate AI Suggestions
              </button>
            </div>
          )}

          {/* Loading State */}
          {loading && (
            <div className="text-center py-12">
              <Loader2 className="h-12 w-12 text-purple-600 mx-auto mb-4 animate-spin" />
              <h4 className="text-lg font-medium text-gray-900 mb-2">
                Generating suggestions...
              </h4>
              <p className="text-gray-600">
                Analyzing session context and crafting questions
              </p>
            </div>
          )}

          {/* Error State */}
          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-start">
                <AlertCircle className="h-5 w-5 text-red-600 mr-3 mt-0.5" />
                <div className="flex-1">
                  <h4 className="text-sm font-medium text-red-900">Error</h4>
                  <p className="text-sm text-red-800 mt-1">{error}</p>
                </div>
              </div>
              {rateLimit && rateLimit.remaining === 0 && (
                <div className="mt-3 text-sm text-red-700">
                  <p>You've reached your daily limit of {rateLimit.dailyLimit} AI suggestions.</p>
                  <p className="mt-1">The limit resets at midnight. In the meantime, you can:</p>
                  <ul className="list-disc list-inside mt-2 ml-2">
                    <li>Browse the question library for proven questions</li>
                    <li>Write questions manually</li>
                    <li>Contact your coordinator if you need additional suggestions</li>
                  </ul>
                </div>
              )}
            </div>
          )}

          {/* Suggestions List */}
          {suggestions.length > 0 && !loading && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="font-medium text-gray-900">
                  {suggestions.length} Suggested Questions
                </h4>
                <button
                  onClick={fetchSuggestions}
                  className="text-sm text-purple-600 hover:text-purple-700 font-medium"
                >
                  Regenerate
                </button>
              </div>

              {suggestions.map((suggestion, index) => (
                <div
                  key={index}
                  className="border border-gray-200 rounded-lg p-4 hover:border-purple-300 hover:bg-purple-50 transition-all"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-start">
                        <span className="flex-shrink-0 w-8 h-8 bg-purple-100 text-purple-600 rounded-full flex items-center justify-center font-semibold text-sm mr-3">
                          {index + 1}
                        </span>
                        <div className="flex-1">
                          <p className="text-gray-900 font-medium leading-relaxed">
                            {suggestion.question}
                          </p>
                          <div className="mt-2 flex items-start">
                            <ChevronRight className="h-4 w-4 text-purple-500 mr-1 mt-0.5 flex-shrink-0" />
                            <p className="text-sm text-gray-600 italic">
                              {suggestion.rationale}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => handleUseQuestion(suggestion)}
                      className="ml-4 px-4 py-2 bg-purple-600 text-white text-sm rounded-md hover:bg-purple-700 whitespace-nowrap"
                    >
                      Use This
                    </button>
                  </div>
                </div>
              ))}

              <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                <p className="text-sm text-gray-600">
                  <strong>ðŸ’¡ Tip:</strong> These suggestions are generated based on your session topic, participant language levels,
                  and position in the roundtable sequence. You can edit them before submitting.
                </p>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 bg-gray-50 flex justify-end gap-3">
          <button
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-100"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  )
}
